colorscheme solarized
set background=dark
set gfn=Operator\ Mono\ SSm\ Book:h24

" Auto updating and writing files
set autoread
set autowrite

" Directional keys operate on display lines
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j

" Disable code folding
set nofoldenable

" Cursor line
hi CursorLine gui=underline guibg='#002b36'
hi CursorLineNR guifg='#586e75' gui=none
set cursorline

" Visual change indent re-selects visual box
vnoremap < <gv
vnoremap > >gv

" Shorcuts
" leader ; adds a semi-colon to the end of a line
map <leader>; A;<Esc>
" leader x runs :x with an enter
map <leader>x :x<cr>
" leader m runs :w with an escape
map <leader>m :w<Esc>

" Trim whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" Reload buffer on focus
au FocusGained,BufEnter * :silent! !

" Move to next/previous tabs
nnoremap [w :tabp<cr>
nnoremap ]w :tabn<cr>

" Move a line of text using Command+[jk] on mac
nmap <D-j> mz:m+<cr>`z
nmap <D-k> mz:m-2<cr>`z
vmap <D-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <D-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Remap VIM 0 to first non-blank character
map 0 ^

" vim-javascript
let g:javascript_plugin_flow = 1

" vim-jsx
let g:jsx_ext_required = 0

" Ctrl-P
let g:ctrlp_custom_ignore = 'node_modules\|^\.DS_Store\|\.git\|PhantomJS|data_loaders|Technical_Reports|.pants.d'

" NerdTree
let g:NERDTreeIgnore = ['node_modules', 'dist', '.git', 'data_loaders', 'Technical_Reports', '.pants.d']
let g:NERDTreeShowHidden = 1

" FZF
nnoremap <leader>f :GFiles<cr>

"Ag
nnoremap <leader>a :Ag<space>
nnoremap <leader>g :Buff<cr>

" Prettier
let g:prettier#exec_cmd_async = 1
let g:prettier#config#bracket_spacing = 'true'
let g:prettier#config#trailing_comma = 'all'
let g:prettier#config#semi = 'false'
let g:prettier#config#parser = 'babylon'

" Emmet
map <leader>e <C-Y>,
imap <C-E> <C-Y>,

" YouCompleteMe
" close preview window
let g:ycm_autoclose_preview_window_after_completion = 1

" Asynchronous Lint Engine (ALE)
" Limit linters used for JavaScript.
let g:ale_linters = {
\  'javascript': ['eslint', 'flow'],
\}
highlight clear ALEErrorSign " otherwise uses error bg color (typically red)
highlight clear ALEWarningSign " otherwise uses error bg color (typically red)
let g:ale_sign_error = 'üö´' " could use emoji
let g:ale_sign_warning = '‚ö†Ô∏è' " could use emoji
let g:ale_statusline_format = ['X %d', '? %d', '']
" %linter% is the name of the linter that provided the message
" %s is the error or warning message
let g:ale_echo_msg_format = '%linter%: %s'
" Map keys to navigate between lines with errors and warnings.
nnoremap <leader>an :ALENextWrap<cr>
nnoremap <leader>ap :ALEPreviousWrap<cr>

